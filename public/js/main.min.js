document.addEventListener("DOMContentLoaded", function () { window.onresize = (() => { i = window.innerWidth, l = window.innerHeight, t.width = i, t.height = l, setTimeout(() => { c.emit("getLines") }, 100) }); var e = { click: !1, move: !1, pos: { x: 0, y: 0 }, pos_prev: !1 }; const t = document.getElementById("drawing"), n = document.getElementsByClassName("color"), o = document.getElementsByClassName("option"); var r = t.getContext("2d"), i = window.innerWidth, l = window.innerHeight, c = io.connect(); const { username: s } = Qs.parse(location.search, { ignoreQueryPrefix: !0 }), a = document.querySelector("#alerts"), d = document.querySelector("#info"), u = document.querySelector("#options"), m = document.querySelector("#clear"), y = document.querySelector("#toolbox"), p = document.querySelector("#select"), h = document.querySelector("#select-timer"), v = document.querySelector("#answer-input"), w = document.querySelector("#tip-letters"), M = document.querySelector("#players-list"), T = document.getElementById("answer-form"), L = document.getElementById("answer"), f = document.querySelector("#alert-template").innerHTML, g = document.querySelector("#info-template").innerHTML, H = document.querySelector("#option-template").innerHTML, S = document.querySelector("#select-clock-template").innerHTML, k = document.querySelector("#tip-template").innerHTML, q = document.querySelector("#players-list-template").innerHTML; var b = { color: "black" }; t.width = i, t.height = l, t.onmousedown = function (t) { e.click = !0 }, t.onmouseup = function (t) { e.click = !1 }, t.onmousemove = function (t) { e.pos.x = t.clientX / i, e.pos.y = t.clientY / l, e.move = !0 }, T.addEventListener("submit", e => { e.preventDefault(); let t = e.target.elements.answer.value; "" !== t && (v.value = "", v.focus(), c.emit("answer", { answer: t, id: c.id })) }), m.addEventListener("click", () => { c.emit("clear") }); for (var x = 0; x < n.length; x++)n[x].addEventListener("click", E, !1); for (x = 0; x < o.length; x++)o[x].addEventListener("click", e => { console.dir(e.target.attributes.name.value) }, !1); function E(e) { b.color = e.target.className.split(" ")[1] } function _(e) { const t = Mustache.render(f, { alert: e }); a.insertAdjacentHTML("beforeend", t), setTimeout(() => { a.innerHTML = "" }, 2e3) } c.on("draw_line", function (e) { var t = e.line; r.beginPath(), r.moveTo(t[0].x * i, t[0].y * l), r.lineTo(t[1].x * i, t[1].y * l), r.strokeStyle = t[2], r.lineWidth = 3, r.stroke() }), c.emit("join", s, e => { _("joined the server"), e && (alert(e), location.href = "/") }), c.on("alert", e => { _(e) }), c.on("clear", e => { setTimeout(() => { r.clearRect(0, 0, t.width, t.height) }, e) }), c.on("info", e => { const t = Mustache.render(g, { info: e }); d.innerHTML = t }), c.on("drawer", e => { p.style.display = "block", L.style.display = "none", y.style.display = "none"; const t = Mustache.render(H, { easy: e.easy, medium: e.medium, hard: e.hard }); u.innerHTML = t; var n = 15; h.innerHTML = Mustache.render(S, { time: n }); var o = setInterval(() => { h.innerHTML = Mustache.render(S, { time: n }), 0 === --n && clearInterval(o) }, 1e3); w.innerHTML = "", c.emit("clearToolboxes") }), c.on("clearToolbox", () => { y.style.display = "none", p.style.display = "none", L.style.display = "block", w.innerHTML = "" }), c.on("draw", () => { p.style.display = "none", y.style.display = "block" }), c.on("kick", () => { location.href = "/" }), c.on("tip", e => { w.innerHTML = Mustache.render(k, { letters: e }) }), c.on("playerlist", e => { M.innerHTML = Mustache.render(q, { players: e }) }), function t() { e.click && e.move && e.pos_prev && (c.emit("draw_line", { line: [e.pos, e.pos_prev, b.color], id: c.id }), e.move = !1), e.pos_prev = { x: e.pos.x, y: e.pos.y }, setTimeout(t, 25) }() });